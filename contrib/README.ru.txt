
WMR - новый компактный софт снимающий данные с погодной станции и сохраняющий
его в различных форматах для последующей обработки и анализа.

В отличии от немногочисленных "собратьев" работающих с погодными станциями Oregon Scientific под linux -  имеет преимущества:
 - позволяет корректировать погрешность датчиков,
 - позволяет сохранять данные в различных метрических стандартах,
 - компактный (подходит для установки на роутерах), 
 - умеет работать демоном, использовать syslog,
 - данные пишет в различных форматах удобных для обработки. 
 - для построения визуальных графиков использует rrd-tool. 

Поддерживаемые форматы хранения данных:

  * ASCII - текстовой формат
  * SQL - использует sqlite3
  * RRD - необходим установленный пакет rrd-tools

Поддерживаемые модели погодных станций:

  * Oregon Scientific LW301 
  * Oregon Scientific WMR88 
  * Oregon Scientific WMR100 
  * Oregon Scientific WMR200 
  * Oregon Scientific WMRS200 
  * Oregon Scientific RMS300  
  * Oregon Scientific RMS600  
  * Oregon Scientific I300  
  * Oregon Scientific I600


Подходит для установки на роутеры, требует библиотек: 
  * libusb 0.x (http://www.libusb.org/ "libusb-compat"),  
  * libhid (http://libhid.alioth.debian.org/),  
  * libsqlite3 (http://www.sqlite.org/download.html),
  * rrd-toots (опционально) (http://oss.oetiker.ch/rrdtool/download.en.html)

Домашняя страничка программы wmrd:
http://code.google.com/p/wmr/

Документация, обновления, модули:
http://www.nkl.ru/support/wmr/

На сайте есть готовая сборка под  OpenWRT для RouteBoard 2xx (i386):
http://www.nkl.ru/support/wmr/wmrd-OpenWrt_i386_bin.tar.gz

Последняя версия:
http://www.nkl.ru/support/wmr/wmrd-latest.tar.gz


SQLite
------------
В начале для использования опции записи данных в SQL, необходимо запустить
скрипт из дериктории: script/wmr_create_db_sqlite3.sh .
Он создаст базу данных, и если надо, директорию /var/weather/weather.db
Посмотреть структуру базы данных можно в файле: conrib/wmr.sql


Alarm'ы / события / ахтунги
------------

Для каждого датчика возможно задать любое значение верних и нижних порогов.
При достижении этих значений, вызывается скрипт, по умолчанию /usr/bin/wmr_alarm.sh

Скрипту передаюся следующие параметры срабатывания лимитов датчиков:
№0 - имя скрипта
№1 - имя эвента, возможные значения: "TEMP","HUMIDITY","PRESSURE","WIND","RAIN","UV"
№2 - номер датчика, согласно описанию в конфиге
№3 - текущее значение параметра датчика, которое вызвало событие alarm
№4 - значение вызвавшее событие alarm, пороги "MIN" или "MAX"

При опросе состояния элементов питания в датчиках и базовой станции, скрипту 
передаются следующие параметры:
№0 - имя скрипта
№1 - имя эвента, возможные значения: "BATTERY"
№2 - номер датчика, согласно описанию в конфиге
№3 - текущее значение параметра датчика, которое вызвало событие alarm
№4 - имя датчика, возможные значения: "MAIN","TEMP","WIND","RAIN","UV"

Посмотреть структуру вызовов можно в файле: 
	script/wmr_alarm.sh
или более дружественная реализация скрипта обработки событий для пользователей:
	script/wmr_alarm_advanced/README
	script/wmr_alarm_advanced/wmr_alarm.sh
	script/wmr_alarm_advanced/etc/wmr/*.sh

Добавлен протокол и библиотека управления Блоком сигнально-пусковым С2000-СП1, 
С2000-СП1 исп.01, блок расчитан на управление 4 силовыми линиями,доступен по цене.

В директории script/controlling/C2000-CP1.php находится скрипт управлениия 
сигнально - пусковым блоком С2000-СП1 компании "Болид", он содержит 4 реле 
управляемых по интерфейсу RS485. Это позволяет при различных погодных условиях 
автоматически включать необходимые нагрузги, например полив грядок, включение 
кондиционера, включение насоса, отключение увлажнителя воздуха, включение 
отопления и т.д.
Подробне о С2000-СП1: http://www.bolid.ru/production/devices/devices_48.html

Скрипт управления вызываемый по событиям: script/wmr_alarm.sh  
Скрипт управления Болид С2000-СП1: script/controlling/C2000-CP1.php 


Запуск/Использование/Ключи командной строки:
------------

Для запуска в консольном режиме: 

	/usr/bin/wmrd -c /etc/wmr.conf

 ключ -c <значение> = полный путь и имя конфигурационного файла, 
		      обычно по умолчанию /etc/wmr/wmr.conf

	/usr/bin/wmrd -l /tmp/wmr

 ключ -l <значение> = полный путь к файлу блокировки запущенной программы
		      в режиме демона, имя файла блокировки файла: 
		      wmrd.lock, в нем содержится пид запущенной 
		      программы, узнать пид можно командой: 
		      cat /var/lock/wmrd.lock	
		      по умолчанию путь для файла блоктровки: /var/lock

	/usr/bin/wmrd -d -c /etc/wmr.conf

 ключ -d = запустить в режиме демона, при этом режим вывода отладочной 
	   и иной информации автоматический перенаправляется в syslog,
	   даже если ключ -s небыл указан.

	/usr/bin/wmrd -s -c /etc/wmr.conf

 ключ -s = вывод отладочной и иной информации перенаправляется в syslog.

	/usr/bin/wmrd -c /etc/wmr.conf -v

 ключ -v = показать все параметры конфигурационного файла, информацию 
	   о программе и ключах запуска. После отображение информации 
	   происходит выход из программы.
	   Ключ -c <значение> должен быть установлен до ключа -v

	/usr/bin/wmrd -k

 ключ -k = выхоод запущенной копии wmrd в режиме демона,
	   иными словами - завершить работу программы, аналогично:
	   kill -TERM `pidof wmrd`

Для автозагрузки, применить указанные ниже комманды, это пример, конкретное
расположение и названия файлов зависит от дистрибутива:
 
	cp contrib/wmr.init /etc/rc.d/init.d/
	ln -s /etc/rc.d/init.d/wmr.init /etc/rc.d/rc3.d/S95wmr
	ln -s /etc/rc.d/init.d/wmr.init /etc/rc.d/rc5.d/S95wmr

Для вступления изменений произведенных в конфиг файле, если прграмма запущена:  
	kill -HUP `pidof wmrd`

Для вступления изменений произведенных в конфиг файле, и переинициализации USB 
соединения, если прграмма запущена:  
	kill -USR1 `pidof wmrd`

Для ротации файлов log/sql/rrd, выполнить:  
	kill -USR2 `pidof wmrd`
	при этом выполняется скрипт script/wmr_logrotate.sh                    

Для остановки программы запущенной в реждиме демона, выполнить:  
	kill -TERM `pidof wmrd`
	или
	/usr/bin/wmrd -k

